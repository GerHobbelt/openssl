=pod

=head1 NAME

SSL_esni_enable, SSL_esni_query,
SSL_esni_checknames, SSL_get_esni_status, 
SSL_ESNI_dec, SSL_ESNI_dup, SSL_ESNI_enc, SSL_ESNI_ext_free,
SSL_ESNI_ext_print, SSL_ESNI_free, SSL_ESNI_get_esni,
SSL_ESNI_get_esni_ctx, SSL_ESNI_grease_me,
SSL_ESNI_new_from_buffer, SSL_ESNI_print, SSL_ESNI_set_nonce,
SSL_ESNI_set_private, SSL_ESNI_wrap_keyshare,
SSL_esni_reduce, SSL_esni_server_enable, 
SSL_set_esni_callback, SSL_set_esni_callback_ctx,
SSL_SESSION_set1_enchostname, SSL_SESSION_set1_covername,
SSL_SESSION_set1_public_name, SSL_SESSION_get0_enchostname
- Encrypted Server Name Indication (SNI) support

=head1 SYNOPSIS

 #include <openssl/esni.h>
 int SSL_SESSION_set1_enchostname(SSL_SESSION *s, const char *hostname);
 int SSL_SESSION_set1_covername(SSL_SESSION *s, const char *covername);
 int SSL_SESSION_set1_public_name(SSL_SESSION *s, const char *public_name);
 const char *SSL_SESSION_get0_enchostname(const SSL_SESSION *s);
 void SSL_set_esni_callback(SSL *s, SSL_esni_client_cb_func f);
 void SSL_set_esni_callback_ctx(SSL_CTX *s, SSL_esni_client_cb_func f);
 unsigned char *SSL_ESNI_wrap_keyshare(
                 const unsigned char *keyshare,
                 const size_t keyshare_len,
                 const uint16_t curve_id,
                 size_t *outlen);
 int SSL_ESNI_enc(SSL_ESNI *esnikeys, 
                 size_t  client_random_len,
                 unsigned char *client_random,
                 uint16_t curve_id,
                 size_t  client_keyshare_len,
                 unsigned char *client_keyshare,
                 CLIENT_ESNI **the_esni);
 unsigned char *SSL_ESNI_dec(SSL_ESNI *esni,
 				size_t	client_random_len,
 				unsigned char *client_random,
 				uint16_t curve_id,
 				size_t	client_keyshare_len,
 				unsigned char *client_keyshare,
 				size_t *encservername_len);
 void SSL_ESNI_free(SSL_ESNI *esnikeys);
 SSL_ESNI* SSL_ESNI_dup(SSL_ESNI* orig, size_t nesni, int selector);
 int SSL_esni_checknames(const char *encservername, const char *covername);
 SSL_ESNI* SSL_ESNI_new_from_buffer(const short ekfmt, const size_t eklen, const char *esnikeys, int *num_esnis);
 int SSL_esni_enable(SSL *s, const char *hidden, const char *cover, SSL_ESNI *esni, int nesnis, int require_hidden_match);
 int SSL_esni_query(SSL_ESNI *in, SSL_ESNI_ext **out, int *nindices);
 void SSL_ESNI_ext_free(SSL_ESNI_ext *in, int size);
 int SSL_ESNI_ext_print(BIO* out, SSL_ESNI_ext *se, int count);
 int SSL_esni_reduce(SSL_ESNI *in, int index, SSL_ESNI **out);
 int SSL_esni_server_enable(SSL_CTX *s, const char *esnikeyfile, const char *esnipubfile);
 int SSL_ESNI_get_esni(SSL *s, SSL_ESNI **esni);
 int SSL_ESNI_get_esni_ctx(SSL_CTX *s, SSL_ESNI **esni);
 int SSL_ESNI_print(BIO* out, SSL_ESNI *esni, int selector);
 int SSL_get_esni_status(SSL *s, char **hidden, char **cover);
 int SSL_ESNI_set_private(SSL_ESNI *esni, char *private_str);
 int SSL_ESNI_set_nonce(SSL_ESNI *esni, unsigned char *nonce, size_t nlen);
 int SSL_ESNI_grease_me(SSL *s, CLIENT_ESNI **cp);

=head1 DESCRIPTION

These functions handle encrypted SNI. TODO: Details:-) 

I forget why I had to add these, but I guess I did...
SSL_SESSION_set1_enchostname, SSL_SESSION_set1_covername,
SSL_SESSION_set1_public_name, SSL_SESSION_get0_enchostname

I just added this because the CI build was complaining about the doc-nits
Makefile target. But no harm to start I guess.

=head1 RETURN VALUES

Everyone returns 1 for success basically.

=head1 SEE ALSO

The specification: https://tools.ietf.org/html/draft-ietf-tls-esni

My fork has a bit of a design doc: https://github.com/sftcd/openssl/blob/master/esnistuff/design.md

=head1 HISTORY

Initially developed by Stephen Farrell. Subsequently supported by OTF via
the DEfO project: https://defo.ie/

=head1 COPYRIGHT

Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
